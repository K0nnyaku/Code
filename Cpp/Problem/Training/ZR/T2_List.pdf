#include<bits/stdc++.h>
using namespace std;

#define IOR(i, st, ed) for(int i = st; i < ed; i++)
#define LOR(i, st, ed) for(int i = st; i > ed; i--)
#define EOR(i, x) for(int i = Head[x]; i; i = E[i].next)
#define ZERO(x) memset(x, 0, sizeof x);
#define T(x) E[x].to
#define V(x) E[x].val

const int MB=1<<21;
struct FastIN
{
	char buf[MB+100],*p,*e;
	int getChar()
	{
		if(p==e) p=buf,e=buf+fread(buf,1,MB,stdin);
		return p==e?EOF:*p++;
	}
	template<typename T>
	FastIN& operator>>(T& x)
	{
		char c,l;
		for(c=0;!isdigit(c);c=getChar())l=c;
		for(x=0;isdigit(c);c=getChar())x=x*10-'0'+c;
		if(l=='-')x=-x;
		return *this;
	}
}IN;
//

const int MAXN = 1e6 + 10;

long long ans;
int A[MAXN], Lf[MAXN], T[MAXN], Tr[MAXN<<2];
int n, m;

bool Check();
bool Wk(int now);

int main() { /**/
#ifdef LOCAL
	freopen("In.in", "r", stdin);
	freopen("Out.out", "w", stdout);
#endif
    IN >> n >> m;
    IOR(i, 0, m) IN >> Lf[i];
    IOR(i, 0, n) T[i] = i+1;

    do {
        ans += Check(1, -1);
    }while(next_permutation(T, T+n));

    printf("%lld\n", ans);

	return 0;
} /**/

bool Check(int now, int last) {
    memset(Vis, 0, sizeof Vis);
    if(!Wk(1)) return false;

    IOR(i, 0, m) if(!Vis[Lf[i]]) return false;
    return true;
}

bool Wk(int now) {
    if(!Tr[now*2] && !Tr[now*2+1]) {
        Vis[Tr[now]] = 1; 
        return ;
    }
    if(Tr[now*2] > Tr[now] || Tr[now*2+1] > Tr[now]) return false;
    return Wk(now*2) && Wk(now*2+1);
}