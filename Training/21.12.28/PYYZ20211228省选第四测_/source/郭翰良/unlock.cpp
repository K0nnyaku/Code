#include <cstdio>
#include <iostream>
#include <cstdlib>
#include <cstring>
#include <string>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;
const int N = 300 + 5;

int t;
int n, k;
int a[N];

struct EDGE {
	int v;
	int nt;
} e[N];
int lt[N], ep;
inline void AE(int u, int v) {
	++ep;
	e[ep].v = v;
	e[ep].nt = lt[u];
	lt[u] = ep;
}
int de[N];

bool h[N];
int q[N], hd, tl;

int mst;
int rm[N], rp;

LD js(int a) {
	LD res = 1;
	for(int i = 2; i <= a; ++i) res *= i;
	return res;
}
LD C(int a, int b) {
	return js(a) / js(b) / js(a - b);
}
LD P(int tn, int tk, int tot, int i) {
	LD res = 1;
	for(int j = 1; j <= i; ++j) {
		res *= (LD)(tk - j + 1) / (tn - j + 1);
	}
	LD tmppp = C(tot, i);
	LD tmp = 1;
	LD res2 = 0;
	for(int j = 1; j <= tmppp; ++j) {
		res2 += tmp * res;
		res2 *= (1 - res);
	}
	return res2;
//	return (LD)C(tot, i) * res;
}

LD ans = 0;
LD dfs(int x, int tk, int tn) {
	if(x > rp) return 1;
	if(tk <= 0) return 0;
	
	LD res = 0;
	for(int i = 1; i <= min(rm[x], tk); ++i) {
		LD dbtmp = P(tn, tk, rm[x], i);
		res += P(tn, tk, rm[x], i) * dfs(x + 1, tk - i, tn - rm[x]);
	}
	return res;
}


int mnrm = ~0u >> 1;

int main() {
	freopen("unlock.in", "r", stdin);
	freopen("unlock.out", "w", stdout);
	scanf("%d", &t);
	while(t--) {
		scanf("%d%d", &n, &k);
		memset(lt, 0, sizeof lt);
		memset(de, 0, sizeof de);
		ep = mst = rp = 0;
		
		for(int i = 1; i <= n; ++i) {
			scanf("%d", &a[i]);
			AE(i, a[i]);
			++de[a[i]];
		}
		
		hd = tl = 0;
		memset(h, 0, sizeof h);
		for(int i = 1; i <= n; ++i) {
			if(de[i] == 0) {
				q[++tl] = i;
				h[i] = true;
//				rm[++rp] = 1;
				++mst;
			}
		}
		while(hd < tl) {
			int u = q[++hd];
			for(int i = lt[u]; i; i = e[i].nt) {
				int v = e[i].v;
				if(h[v]) continue;
				h[v] = true;
				
				q[++tl] = v;
			}
		}
		
		for(int i = 1; i <= n; ++i) {
			if(h[i]) continue;
			hd = tl = 0;
			q[++tl] = i;
			h[i] = true;
			while(hd < tl) {
				int u = q[++hd];
				for(int j = lt[u]; j; j = e[j].nt) {
					int v = e[j].v;
					if(h[v]) continue;
					h[v] = true;
					
					q[++tl] = v;
				}
			}
			rm[++rp] = tl;
			mnrm = min(mnrm, tl);
		}
		
//		if(rp > k) coutendl;
//		else {
//			for(int i = 1; i <= rp; ++i) {
//				
//			}
//		}
		if(mst + rp > k) {
			cout << 0 << endl;
		}
		else if(k > n - min(mnrm, mst ? 1 : (int)(~0u >> 1))) {
			cout << 1 << endl;
		}
		else {
			LD tv = 1;
			for(int i = 1; i <= mst; ++i) {
				tv *= (LD)(k - i + 1) / (n - i + 1);
			}
			cout << dfs(1, k - mst, n - mst) * tv << endl;
		}
	}
	return 0;
}

